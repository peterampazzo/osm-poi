import os
import geopandas as gpd
from shapely.geometry import box
import overpy
import json
from collections import Counter
from typing import Dict, List, Any, Tuple
import logging


class OSM:
    def __init__(self, max_retry_count: int = 4, retry_timeout: int = 3) -> None:
        self.api = overpy.Overpass(
            max_retry_count=max_retry_count, retry_timeout=retry_timeout
        )

    def query(self, minx: int, miny: int, maxx: int, maxy: int) -> Tuple[list, list]:
        result = self.api.query(
            f"""
            (way
            ({minx},{miny},{maxx},{maxy});
            node
            ({minx},{miny},{maxx},{maxy});
            );
            out body;
            """
        )
        return result.nodes, result.ways


def loop_list(item: Dict[str, Any]) -> str:
    key = list(item.keys())[0]
    return f"{key}={item[key]}"


def load_file(filename: str) -> gpd.GeoDataFrame:
    # bbox = min Longitude , min Latitude , max Longitude , max Latitude

    data = gpd.read_file(filename)
    poly_geom = data.bounds  # bounds for individual geometries
    # Coordinates generated by GeoPandas are flipped for OSM API
    b = poly_geom.apply(lambda row: box(row.minx, row.miny, row.maxx, row.maxy), axis=1)
    data = gpd.GeoDataFrame(poly_geom, geometry=b)

    return data


def download(filename: str, label: str = None) -> None:
    gdf = load_file(filename)
    api = OSM()

    data: Dict[str, List[Any]] = {"features": [], "nodes": [], "ways": []}

    for index, row in gdf.iterrows():  # Looping over all points
        nodes, ways = api.query(row.miny, row.minx, row.maxy, row.maxx)

        nodes = [loop_list(item.tags) for item in nodes if any(item.tags)]
        ways = [loop_list(item.tags) for item in ways if any(item.tags)]

        data["nodes"].extend(nodes)
        data["ways"].extend(ways)

        polygon = {
            "id": row[label] if label else index,
            "nodes": Counter(nodes),
            "ways": Counter(ways),
        }

        data["features"].append(polygon)
        logging.debug(f"Queried polygon {index}.")

    data["nodes"] = Counter(data["nodes"])
    data["ways"] = Counter(data["ways"])

    directory = os.path.dirname(filename)
    filename = os.path.basename(filename).split(".")[0]
    for key in data:
        with open(f"{directory}/{filename}-{key}.json", "w") as write_file:
            json.dump(data[key], write_file)
            logging.info(f"Dumped file {directory}/{filename}-{key}.json")

    logging.info("Completed.")
